Question: 1  Buzz Day Sale
Problem Description
Karan, who owns a shop at an exhibition, is planning to launch a promotion where customers receive free items with the purchase of specific items. He has chosen a few items for this special offer, which he's called the "Buzz Day Sale." Additionally, there are unlimited quantities available for each item type.

He assigned a unique ID to each item basis it's worth and put up a board that reads, "For every purchase of an item with ID K, all other items with IDs that are factors of K, will be free."

Veda visited Karan's shop on Buzz Day with the aim of acquiring as many items as possible while carrying a limited amount of money, A. If there are several ways to maximize the number of free items, she will strive to maximize the total worth of the items she receives freely.

Given the IDs of all the items offered in the sale and their costs, determine the maximum number of items Veda can receive for free and the maximum total worth of those items.

Constraints
1 <= N <= 500

1 <= ID of each item <= 1000

1 <= cost of each item <= 1000

1 <= Amount Veda holds <= 1000

Input
First lines consist of an integer N, denoting the number of items in the sale.

Second line consists of N space separated integers denoting the ID of items.

Third line consists of N space separated integers denoting the cost of each item.

Last line consists of a single integer A, denoting the amount Veda has.

Output
Print two space-separated integers indicating the maximum number of free items Veda can obtain and the maximum total worth of those items given the amount she has.

Maximize the number of free items first then maximize the total worth of free items.

Time Limit (secs)
1

Examples
Example 1

Input

7

4 9 11 13 15 5 25

1 4 2 6 3 7 8

10

Output

3 21

Explanation

There are 7 items with IDs {4, 9, 11, 13, 15, 5, 25} on sale. Their costs are {1, 4, 2, 6, 3, 7, 8}. Veda has 10 Rupees to spend on purchasing items in Buzz Day Sale.

If Veda buys the item with ID 15 in quantity of three, the total cost will be 3×3=9 (cost of ID 15 x quantity), which is less than 10. She will receive the item with ID 5 for free which is of worth 7. Thus, she will get the item with ID 5 with quantity three for free, resulting in a total worth of 7×3=21.

Since the quantity of free items is 3 and cost of free items is 21, print them as output.

Example 2

Input

5

11 24 3 12 7

7 11 15 9 4

17

Output

2 24

Explanation

There are 5 items with IDs {11, 24, 3, 12, 7} on sale. Their costs are {7 11 15 9 4}. Veda has 17 Rupees to spend on purchasing items in Buzz Day Sale.

If Veda buys item with ID 24, she will receive the items with ID 3 and ID 12 for free. No other purchase of combination will yield more free items. Therefore, she will get 2 free items, with a total worth of 24.

Since the quantity of free items is 2 and cost of free items is 24, print them as output.

Solution:- #include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;


int main() {
    int n;
    cin >> n;

    vector<int> ids(n), costs(n);
    for (int i = 0; i < n; i++) cin >> ids[i];
    for (int i = 0; i < n; i++) cin >> costs[i];

    int budget;
    cin >> budget;

    int mfi = 0, mfw = 0;

    for (int i = 0; i < n; i++) {
        int buyCost = costs[i];
        int maxQty = budget / buyCost;

        if (maxQty > 0) {
            int cfi = 0;
            int cfw = 0;


            for (int j = 0; j < n; j++) {
                if (i != j && ids[i] % ids[j] == 0) {
                    cfi += maxQty;
                    cfw += costs[j] * maxQty;
                }
            }

            if (cfi > mfi || 
               (cfi == mfi && cfw > mfw)) {
                mfi = cfi;
                mfw = cfw;
            }
        }
    }

    cout << mfi <<" "<< mfw << endl;
    return 0;
}

***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
Vishal owns a startup with a small team of employees. Vishal noticed a peculiar behaviour by his employees.

Among the employees, they have established some friendships. Every employee has one or more friends in office. Whether one is working from office next day depends on their own and their friend's status today i.e., WFH or WFO.

The behaviour is

When an employee worked from office today (WFO) and exactly 3 of his friends also worked from office, then he will continue to work from office the next day, else he will work from home (WFH) the next day
When an employee worked from home today and less than 3 of his friends worked from office, then he will work from office the next day, else he will continue work from home
On day one everyone will be working from office. Employees mark their attendance when they come to the office. Rostering over R days is defined as the total number of employees who attended the office during these R days.

Given the friendship connections of employees and an integer K, determine how many days it will take to reach a rostering value of K, following the rules.

Constraints
3 < N, M < 30

1 < K < 50

Input
The first line contains two space-separated integers N and M, representing the number of employees and the total number of friendships among them.

The next M lines contain two space-separated integers representing IDs of two employees who are friends.

Last line consists of a single integer K, denoting the rostering value that should be achieved.

Output
Single integer denoting the number of days it will take to achieve the rostering value K.

Time Limit (secs)
1

Examples
Example 1

Input

4 5

1 3

3 2

0 3

0 1

2 1

8

Output

3

Explanation

From the input it is seen that there are 4 employees and 5 connections. Employee 0 is friends with 1,3; 1 is friends with 0, 2, 3; 2 is friends with 1,3; 3 is friends with 0, 1, 2. Rostering value required to be achieved is 8.

On Day 1everyone will work from office, the rostering value achieved day one is 4.

On Day 2 employees 1 and 3 will work from office, as they have 3 friends and all 3 worked from office last day. Employees 0 and 2 will work from home as they have less than 3 of their friends who worked from office last day. Since two employees will work from office on day 2, rostering value achieved including day two is 6.

On Day 3, employees 1 and 3 will work from home, since less than 3 of their friends worked from office last day. Employees 0 and 2 will work from office as they have less than 3 of their friends who worked from office last day. Thus, rostering value achieved including day 3 is 8.

Rostering value has been reached on day 3, hence the output 3.

Example 2

Input

5 7

1 4

0 4

0 1

3 2

3 4

2 0

1 3

15

Output

5

Explanation

From input it is seen that are 5 employees and 7 connections, 15 is the rostering value needed to be reached.

On Day 1: All employees will work from office; rostering value at end of the day is 5.

On Day 2: Employees 1, 3, 4 and 0 will work from office, rostering value at end of the day is 9.

On Day 3: Employees 1, 2 and 4 will work from office, rostering value at end of the day is 12.

On Day 4: All employees will do work from home, rostering value at end of the day is 12.

On Day 5: All employees will work from office, rostering value at end of the day is 17.

On Day 5, since the rostering value target is reached (17 > 15), hence print 5 as output.

Solution:-   #include <iostream>
#include <vector>
using namespace std;

int main() {
    int numEmployees, numFriendships;
    cin >> numEmployees >> numFriendships;

    vector<vector<int>> friendships(numEmployees);
    for (int i = 0; i < numFriendships; ++i) {
        int employee1, employee2;
        cin >> employee1 >> employee2;
        friendships[employee1].push_back(employee2);
        friendships[employee2].push_back(employee1);
    }

    int targetRoster;
    cin >> targetRoster;

    vector<int> currentStatus(numEmployees, 1); 
    int cumulativeRoster = numEmployees;
    int days = 1;

    while (cumulativeRoster < targetRoster) {
        vector<int> nextStatus(numEmployees, 0);
        int todayRoster = 0;

        for (int i = 0; i < numEmployees; ++i) {
            int countFriendsWFO = 0;
            for (int friendId : friendships[i]) {
                if (currentStatus[friendId] == 1) {
                    ++countFriendsWFO;
                }
            }

            if (currentStatus[i] == 1) {
                nextStatus[i] = (countFriendsWFO == 3) ? 1 : 0;
            } else {
                nextStatus[i] = (countFriendsWFO < 3) ? 1 : 0;
            }

            if (nextStatus[i] == 1) {
                ++todayRoster;
            }
        }

        cumulativeRoster += todayRoster;
        currentStatus = nextStatus;
        ++days;
    }

    cout << days;
    return 0;
}


******************************************************************************************************************************************************************************************************************************************************************************************************************************
